#!/bin/bash

echo "üöÄ D√©marrage du test Widget Builder Pro avec SignalConso"
echo "================================================="

# Couleurs pour les messages
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
log_info() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier Node.js
echo "1. V√©rification des pr√©requis..."
if command -v node &> /dev/null; then
    log_info "Node.js install√© : $(node -v)"
else
    log_error "Node.js n'est pas install√©"
    exit 1
fi

# D√©marrer le serveur backend
echo ""
echo "2. D√©marrage du serveur backend..."
cd /Users/alex/Desktop/widget-dsfr/widget-builder-pro

# V√©rifier si le serveur est d√©j√† en cours d'ex√©cution
if lsof -Pi :3000 -sTCP:LISTEN -t >/dev/null ; then
    log_warning "Un serveur √©coute d√©j√† sur le port 3000"
    echo "Arr√™ter le serveur existant ? (y/n)"
    read -r response
    if [[ "$response" == "y" ]]; then
        kill $(lsof -Pi :3000 -sTCP:LISTEN -t)
        sleep 2
    fi
fi

# D√©marrer le serveur en arri√®re-plan
echo "D√©marrage du serveur backend sur http://localhost:3000..."
node backend/server.js &
SERVER_PID=$!
sleep 3

# V√©rifier que le serveur est bien d√©marr√©
if curl -s http://localhost:3000/api/health > /dev/null; then
    log_info "Serveur backend d√©marr√© (PID: $SERVER_PID)"
else
    log_error "Impossible de d√©marrer le serveur backend"
    exit 1
fi

# Ouvrir le fichier de test dans le navigateur
echo ""
echo "3. Ouverture du dashboard de test..."
DASHBOARD_FILE="/Users/alex/Desktop/widget-dsfr/mcp-ods-widgets/test-signalconso.html"

if [ -f "$DASHBOARD_FILE" ]; then
    log_info "Ouverture du dashboard SignalConso..."
    open "$DASHBOARD_FILE"
else
    log_error "Fichier de test non trouv√© : $DASHBOARD_FILE"
fi

# Afficher les URLs
echo ""
echo "================================================="
echo "üìä URLS DISPONIBLES :"
echo "================================================="
echo "‚Ä¢ Dashboard SignalConso : file://$DASHBOARD_FILE"
echo "‚Ä¢ API Backend : http://localhost:3000/api/health"
echo "‚Ä¢ Widget Builder : http://localhost:3000"
echo ""
echo "================================================="
echo "üìù WIDGETS TEST√âS (15+) :"
echo "================================================="
echo "‚úì ods-dataset-context    - Contexte de donn√©es"
echo "‚úì ods-aggregation        - KPIs et statistiques"
echo "‚úì ods-searchbox          - Recherche textuelle"
echo "‚úì ods-facets             - Filtres √† facettes"
echo "‚úì ods-table              - Table de donn√©es"
echo "‚úì ods-chart              - Graphiques (colonnes, lignes)"
echo "‚úì ods-gauge              - Jauge visuelle"
echo "‚úì ods-treemap            - Carte proportionnelle"
echo "‚úì ods-map                - Carte g√©ographique"
echo "‚úì ods-map-layer          - Couche de carte"
echo "‚úì ods-timeline           - Ligne de temps"
echo "‚úì ods-cross-table        - Tableau crois√©"
echo "‚úì ods-export-file        - Export CSV/Excel/GeoJSON"
echo "‚úì ods-clear-all-filters  - Effacer les filtres"
echo "‚úì ods-filter-summary     - R√©sum√© des filtres"
echo ""
echo "================================================="
echo "üéØ TESTS √Ä EFFECTUER :"
echo "================================================="
echo "1. V√©rifier le chargement des donn√©es SignalConso"
echo "2. Tester la recherche et les filtres"
echo "3. V√©rifier les visualisations (graphiques, carte)"
echo "4. Tester l'export des donn√©es"
echo "5. Valider le th√®me DSFR"
echo "6. V√©rifier l'accessibilit√© clavier"
echo ""
echo "================================================="
echo "‚å®Ô∏è  COMMANDES UTILES :"
echo "================================================="
echo "‚Ä¢ Arr√™ter le serveur : kill $SERVER_PID"
echo "‚Ä¢ Voir les logs : tail -f /tmp/widget-builder.log"
echo "‚Ä¢ Relancer : ./test-startup.sh"
echo ""
log_info "Test pr√™t ! Le dashboard devrait s'ouvrir dans votre navigateur."
echo ""

# Attendre que l'utilisateur arr√™te le script
echo "Appuyez sur Ctrl+C pour arr√™ter le serveur..."
wait $SERVER_PID